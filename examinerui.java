/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package examautomation;


import java.awt.Color;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.JOptionPane;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author Mk3s
 */
public class examinerui extends javax.swing.JFrame {
        String qselect,aselect;
        Boolean flag;
    
    public examinerui(String examinerid,String paperid) {
        Connection conn=new dbconnection().connect();
        initComponents();
        setTitle("Examiner UI");
        jLabel1.setText("Examiner id:"+examinerid);
        jLabel2.setText("Paper id:"+paperid);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        NumberFormat format = DecimalFormat.getInstance();
        format.setMinimumFractionDigits(1);
        format.setMaximumFractionDigits(1);
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setAllowsInvalid(false);
        formatter.setMinimum(0.0);
        formatter.setMaximum(5.0);
        jFormattedTextField1 = new javax.swing.JFormattedTextField(formatter);
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Examiner id:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Paper id: ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Question 1 (any 2)", "Question 2 (any 2)", "Question 3 (any 2)", "Question 4 (any 2)", "Question 5 (any 2)", "Question 6 (any 2)", "Question 7 (any 3)"}));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Answer A", "Answer B", "Answer C", "Answer D", "Answer E", "Answer F"}));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Marks");
        
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Question Number");
        
        jFormattedTextField1.setColumns(15);
        jFormattedTextField1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jFormattedTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextField1.setText("");
        jFormattedTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Diagram");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("Submit Marks");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("Finish");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        
        jButton4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton4.setText("Get Answers");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

       javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(172, 172, 172)
                        .addComponent(jLabel4)
                        .addGap(136, 136, 136)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
       layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

   
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) { 
       
       
    }
    
        private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        
    }                                          
    
        //submit button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        //marks validation
         String input=jFormattedTextField1.getText();
         if(input.isEmpty())
         {
         JOptionPane.showMessageDialog(null,"Enter Marks");
         return;
         }
        float enteredmarks=Float.valueOf(input);
        if(enteredmarks==0 || enteredmarks==0.5 || enteredmarks==1 || enteredmarks==1.5 || enteredmarks==2 ||
                enteredmarks==2.5 || enteredmarks==3 || enteredmarks==3.5 || enteredmarks==4 || enteredmarks==4.5 || enteredmarks==5 ) 
        {
        //upload validation
            String paperid=jLabel2.getText();
            paperid=paperid.substring(9);
            String questionnumber=jLabel4.getText();
            if(questionnumber=="Question Number"){
            JOptionPane.showMessageDialog(null,"Get answers first");
            return;
            }
            if(questionnumber=="Please select correct answer"){
            JOptionPane.showMessageDialog(null,"Invalid question selected");
            return;
            }
            for(int i=0;i<=6;i++)
            {
            if(toptions[i]>=4 && enteredmarks==0.0){
            JOptionPane.showMessageDialog(null,"Cancelling the question");
            toptions[i]=toptions[i]-2;
            }
            }
            
            //upload counter
        if(questionnumber=="q1a1" || questionnumber=="q1a2" || questionnumber=="q1a3" || questionnumber=="q1a4")
        {
            if(toptions[0]>=3)
            {
            JOptionPane.showMessageDialog(null, "Marks for two subquestions already entered");
            }
            
        toptions[0]++;
        }
        else if(questionnumber=="q2a1" || questionnumber=="q2a2" || questionnumber=="q2a3" || questionnumber=="q2a4")
        {
            if(toptions[1]>=3)
            {
            JOptionPane.showMessageDialog(null, "Marks for two subquestions already entered");
            }
            
        toptions[1]++;
        }
                else if(questionnumber=="q3a1" || questionnumber=="q3a2" || questionnumber=="q3a3" || questionnumber=="q3a4")
        {
            if(toptions[2]>=3)
            {
            JOptionPane.showMessageDialog(null, "Marks for two subquestions already entered");
            }
            
        toptions[2]++;
        }
                else if(questionnumber=="q4a1" || questionnumber=="q4a2" || questionnumber=="q4a3" || questionnumber=="q4a4")
        {
            if(toptions[3]>=3)
            {
            JOptionPane.showMessageDialog(null, "Marks for two subquestions already entered");
            }
            
        toptions[3]++;
        }
                else if(questionnumber=="q5a1" || questionnumber=="q5a2" || questionnumber=="q5a3" || questionnumber=="q5a4")
        {
            if(toptions[4]>=3)
            {
            JOptionPane.showMessageDialog(null, "Marks for two subquestions already entered");
            }
            
        toptions[4]++;
        }
                else if(questionnumber=="q6a1" || questionnumber=="q6a2" || questionnumber=="q6a3" || questionnumber=="q6a4")
        {
            if(toptions[5]>=3)
            {
            JOptionPane.showMessageDialog(null, "Marks for two subquestions already entered");
            }
            
        toptions[5]++;
        }
                else if(questionnumber=="q7a1" || questionnumber=="q7a2" || questionnumber=="q7a3" || questionnumber=="q7a4" || questionnumber=="q7a5" || questionnumber=="q7a6")
        {
            if(toptions[6]>=3)
            {
            JOptionPane.showMessageDialog(null, "Marks for two subquestions already entered");
            }
        toptions[6]++;
        }
        
        
        
        
            
            //marks upload
            try{
            Connection conn=new dbconnection().connect();
            String sql="UPDATE marks SET "+questionnumber+" =? WHERE id=?";
            PreparedStatement mps = conn.prepareStatement(sql);
            mps.setDouble(1,enteredmarks);
            mps.setString(2,paperid);
             int rs = mps.executeUpdate();
         if(rs!=0){
         JOptionPane.showMessageDialog(null, "Marks Uploaded");
         jFormattedTextField1.setText("");
         }
         else{
         JOptionPane.showMessageDialog(null, "not uploaded");
         }
        }
        catch(HeadlessException | SQLException e){
        JOptionPane.showMessageDialog(null,e);
        }
        
        }
        else{
        JOptionPane.showMessageDialog(null,"Invalid Marks entered");
        return;
        }
             
        String questionnumber=questionfinder();
        //JOptionPane.showMessageDialog(null,questionnumber);
        if(questionnumber=="Please select correct answer")
        {
        return;
        }
        
        
        
        
        
       
    
    
    
    
    
    }
    //answerloading
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
         String questionnumber=questionfinder();
       // JOptionPane.showMessageDialog(null,questionnumber);
        jLabel4.setText(questionnumber);
        if(questionnumber=="Please select correct answer"){
        return;
        }
        //answer load
         Connection conn=new dbconnection().connect();
        try{
         String ansload="SELECT "+questionnumber+" FROM answers WHERE id =?";
         String paperid=jLabel2.getText();
         paperid=paperid.substring(9);
         PreparedStatement lps = conn.prepareStatement(ansload);
         lps.setString(1,paperid);
         ResultSet rs = lps.executeQuery();
          while ( rs.next() ) { 
           String result = rs.getString(1);
           //JOptionPane.showMessageDialog(null,result);          
          jTextArea1.setText(result);
           jTextArea1.setDisabledTextColor(Color.black);
          }
          
          
          
          
          
         
        // TODO add your handling code here:
    }catch(HeadlessException | SQLException e){
    JOptionPane.showMessageDialog(null,e);
    }
        
    } 
   //diagram loading 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        //load diagram
        String questionnumber=questionfinder();
        Connection conn=new dbconnection().connect();
        try{
        String paperid=jLabel2.getText();
        paperid=paperid.substring(9);
        String sql="Select "+questionnumber+" FROM diagram WHERE id ="+paperid;
       
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        int i = 0;
         while (rs.next()) {
            InputStream in = rs.getBinaryStream(1);
            String filename="C:\\images/"+questionnumber+"load.png";
            OutputStream f = new FileOutputStream(new File(filename));
            i++;
            int c = 0;
            while ((c = in.read()) > -1) {
                f.write(c);
            }
            f.close();
            in.close();
        }
         imageload il=new imageload(questionnumber);
         il.setVisible(true);
    }catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null,"No Diagrams in this answer");
        }
        
        catch(Exception ex){
    JOptionPane.showMessageDialog(null,ex); 
    }
    
    
    }
    //finish button
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
      //more marks submitted validation
        for(int i=0;i<=6;i++)
        {
        if(toptions[i]>=4)
        {
            int qc=i+1;
        JOptionPane.showMessageDialog(null,"Extra marks given to Question "+qc);
        flag=false;
        return;
        }
        }
        
       
     /* minimum marks submitted validition   
        for(int i=0;i<=6;i++)
        {
        if(toptions[i]==1)
        {
        JOptionPane.showMessageDialog(null,"Question"+i+1+"not evaluated");
        return;
        }
        }*/
        //JOptionPane.showMessageDialog(null,"finished");
        calculate();
        
    }
    
    public String questionfinder()
    {
    String questionnumber="q1a1";
    qselect=(String)jComboBox1.getSelectedItem();
    aselect=(String)jComboBox2.getSelectedItem();
    String invalidanswer="Please select correct answer";
    if(qselect=="Question 1 (any 2)"){
             if(aselect=="Answer A"){
                questionnumber="q1a1";
                
                
                 
         }      else if(aselect=="Answer B"){
                questionnumber="q1a2";
               
         }      else if(aselect=="Answer C"){
                questionnumber="q1a3";
                
        
         }      else if(aselect=="Answer D"){
                questionnumber="q1a4";
               
         }
                else if(aselect=="Answer E"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");    
                return invalidanswer; 
             }
                else if(aselect=="Answer F"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
            
         }
         
         
         if(qselect=="Question 2 (any 2)"){
             if(aselect=="Answer A"){
                questionnumber="q2a1";
               
         }      else if(aselect=="Answer B"){
                questionnumber="q2a2";
              
         }      else if(aselect=="Answer C"){
                questionnumber="q2a3";
              
         }      else if(aselect=="Answer D"){
                questionnumber="q2a4";
                
         }
                 else if(aselect=="Answer E"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
                 else if(aselect=="Answer F"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
             
         }
         
         if(qselect=="Question 3 (any 2)"){
             if(aselect=="Answer A"){
                questionnumber="q3a1";
                
         }      else if(aselect=="Answer B"){
                questionnumber="q3a2";
                
         }      else if(aselect=="Answer C"){
                questionnumber="q3a3";
               
         }      else if(aselect=="Answer D"){
                questionnumber="q3a4";
                
         }
                else if(aselect=="Answer E"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
                else if(aselect=="Answer F"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
         }
         
         if(qselect=="Question 4 (any 2)"){
             if(aselect=="Answer A"){
                questionnumber="q4a1";
                
         }      else if(aselect=="Answer B"){
                   questionnumber="q4a2";
                  
         }      else if(aselect=="Answer C"){
                questionnumber="q4a3";
                
         }      else if(aselect=="Answer D"){
                questionnumber="q4a4";
               
         }
                else if(aselect=="Answer E"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
                else if(aselect=="Answer F"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
         }
         
         if(qselect=="Question 5 (any 2)"){
             if(aselect=="Answer A"){
                questionnumber="q5a1";
                
         }      else if(aselect=="Answer B"){
                questionnumber="q5a2";
                
         }      else if(aselect=="Answer C"){
                questionnumber="q5a3";
                
         }      else if(aselect=="Answer D"){
                questionnumber="q5a4";
               
         }
                else if(aselect=="Answer E"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
                else if(aselect=="Answer F"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
         }
         
         if(qselect=="Question 6 (any 2)"){
             if(aselect=="Answer A"){
                questionnumber="q6a1";
                
         }      else if(aselect=="Answer B"){
                questionnumber="q6a2";
                
         }      else if(aselect=="Answer C"){
                questionnumber="q6a3";
                
         }      else if(aselect=="Answer D"){
                questionnumber="q6a4";
                
         }
                else if(aselect=="Answer E"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
                else if(aselect=="Answer F"){
                 JOptionPane.showMessageDialog(null,"Invalid Selection");
                 return invalidanswer;
         }
         }
         
         if(qselect=="Question 7 (any 3)"){
             if(aselect=="Answer A"){
                questionnumber="q7a1";
                
         }      else if(aselect=="Answer B"){
                questionnumber="q7a2";
                
         }      else if(aselect=="Answer C"){
                questionnumber="q7a3";
                
         }      else if(aselect=="Answer D"){
                questionnumber="q7a4";
                
         }      else if(aselect=="Answer E"){
                questionnumber="q7a5";
                
         }      else if(aselect=="Answer F"){
                questionnumber="q7a6";
                
         }
         }
    
    
    
    return questionnumber;
    }
    
    public void calculate()
    {
    Connection conn=new dbconnection().connect();
    String paperid=jLabel2.getText();
            paperid=paperid.substring(9);
    String sql="SELECT SUM(q1a1+q1a2+q1a3+q1a4+q2a1+q2a2+q2a3+q2a4+q3a1+q3a2+q3a3+q3a4+q4a1+q4a2+q4a3+q4a4+q5a1+q5a2+q5a3+q5a4+q6a1+q6a2+q6a3+q6a4+q7a1+q7a2+q7a3+q7a4+q7a5+q7a6)\n" +
    "FROM marks WHERE id=?;";   
    double total=0.0;
    double percent=0;
    String grade="";
    
    try{
        PreparedStatement lps = conn.prepareStatement(sql);
        lps.setString(1,paperid);
        ResultSet rs = lps.executeQuery();
          while ( rs.next() ) { 
           String result = rs.getString(1); 
           total=Float.valueOf(result);
           percent=total*1000/750;
           
          // float gpa=percent(mod 7());
           
           grade="A";
           if(percent>=75){
           grade="A";
           }else if(percent>=60)
           {
           grade="B";
           }else if(percent>=55)
           {
           grade="C";
           }
           else if(percent>=50)
           {
           grade="D";
           }
           else if(percent<=39)
           {
           grade="F";
           }}
           }catch(Exception e)
           {
            JOptionPane.showMessageDialog(null,e);
            }
   
            //upload total,percent..
            try{
            sql="UPDATE marks SET total=?,percent="+percent+",grade=? WHERE id="+paperid;
           
             PreparedStatement lps = conn.prepareStatement(sql);
             lps.setDouble(1,total);
             lps.setString(2,grade);
             int rs= lps.executeUpdate();
             
             
            }catch(Exception e)
            {
            JOptionPane.showMessageDialog(null,e);
            }
            
            
            
            try{
                
                if(total<30 || total>70)
                {
                sql="UPDATE record SET level = 2 WHERE id = ?"  ;
                }else{
                    JOptionPane.showMessageDialog(null,total);
                sql="UPDATE record SET level = 3 WHERE id = ?" ;
                }
                PreparedStatement lps = conn.prepareStatement(sql);
                lps.setString(1,paperid);
                int rs= lps.executeUpdate();
            }catch(Exception e){
             JOptionPane.showMessageDialog(null,e);
            
            }
            String userid=jLabel1.getText();
            userid=userid.substring(12);
            dispose();
            paperlistdesign p =new paperlistdesign(userid);
            p.setVisible(true);
            
            
    
    }
 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(examineruidesign2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(examineruidesign2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(examineruidesign2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(examineruidesign2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new examineruidesign2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    int [] toptions={1,1,1,1,1,1,1};
    // End of variables declaration                   
}
